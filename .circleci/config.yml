version: 2 # CircleCI 2.0 を使用します

jobs: # 一連のステップ
  build: # ワークフローを使用しない実行では、エントリポイントとして `build` ジョブが必要です
    docker: # Docker でステップを実行します

      - image: circleci/php:latest # このイメージをすべての `steps` が実行されるプライマリ コンテナとして使用します
    working_directory: ~/circleci-test/www/html/laravel # ステップが実行されるディレクトリ
    steps: # 実行可能コマンドの集合
      - checkout # ソース コードを作業ディレクトリにチェックアウトする特別なステップ
      - run: sudo docker-php-ext-install pdo_mysql
      - run: sudo docker-php-ext-install zip
      - run: sudo composer self-update
      - restore_cache: # `composer.lock` が変更されていない場合に、依存関係キャッシュを復元する特別なステップ
          keys:
            - composer-v1-{{ checksum "www/html/laravel/composer.lock" }}
            # 正確な一致が見つからない場合は、最新のキャッシュの使用にフォールバックします (https://circleci.com/ja/docs/2.0/caching/ を参照)
            - composer-v1-
      # - run: composer install -n --prefer-dist
      - save_cache: # `composer.lock` キャッシュ キー テンプレートを使用して依存関係キャッシュを保存する特別なステップ
          key: composer-v1-{{ checksum "www/html/laravel/composer.lock" }}
          paths:
            - vendor
      - restore_cache: # `package.json` が変更されていない場合に、依存関係キャッシュを復元する特別なステップ
          keys:
            - node-v1-{{ checksum "www/html/laravel/package-lock.json" }}
            # 正確な一致が見つからない場合は、最新のキャッシュの使用にフォールバックします (https://circleci.com/ja/docs/2.0/caching/ を参照)
            - node-v1-
      - run: yarn install
      - save_cache: # `package.json` キャッシュ キー テンプレートを使用して依存関係キャッシュを保存する特別なステップ
          key: node-v1-{{ checksum "www/html/laravel/package-lock.json" }}
          paths:
            - node_modules
      - run: touch www/html/laravel/storage/testing.mysql
      - run: php artisan migrate --env=testing --database=circleci_test --force
      - run: ./vendor/bin/phpunit build
      - run: ./vendor/bin/phpunit run